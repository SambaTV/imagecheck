name: Go

on:
  push:
    branches: ['main']

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read application version
        id: get_version
        run: echo ::set-output name=VERSION::$(cat VERSION)

      - name: Build Docker image with SHA tag
        run: docker build -t ghcr.io/sambatv/imagecheck:${{ github.sha }} .

      - name: Tag Docker image with version
        run: |
          docker tag ghcr.io/sambatv/imagecheck:${{ github.sha }} ghcr.io/sambatv/imagecheck:v${{ steps.get_version.outputs.VERSION }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password:
            ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push ghcr.io/sambatv/imagecheck:${{ github.sha }}
          docker push ghcr.io/sambatv/imagecheck:v${{ steps.get_version.outputs.VERSION }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Build binary tarball for Linux/Intel
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/linux/amd64/imagecheck .
          cp LICENSE README.md build/linux/amd64/
          tar -czf build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_amd64.tar.gz -C build/linux/amd64 .

      - name: Build binary for Linux/Arm
        run: |
          GOOS=linux GOARCH=arm64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/linux/arm64/imagecheck .
          cp LICENSE README.md build/linux/arm64/
          tar -czf build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_arm64.tar.gz -C build/linux/arm64 .

      - name: Build binary for macOS/Intel
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/darwin/amd64/imagecheck .
          cp LICENSE README.md build/darwin/amd64/
          tar -czf build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_amd64.tar.gz -C build/darwin/amd64 .

      - name: Build binary for macOS/Apple Silicon
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/darwin/arm64/imagecheck .
          cp LICENSE README.md build/darwin/arm64/
          tar -czf build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_arm64.tar.gz -C build/darwin/arm64 .

      - name: Build source tarball
        run: |
          git archive --format=tar.gz --prefix=imagecheck-${{ steps.get_version.outputs.VERSION }}/ -o build/tarballs/imagecheck-${{ steps.get_version.outputs.VERSION }}.tar.gz ${{ github.sha }}

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_amd64.tar.gz
            build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_arm64.tar.gz
            build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_amd64.tar.gz
            build/tarballs/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_arm64.tar.gz
            build/tarballs/imagecheck-${{ steps.get_version.outputs.VERSION }}.tar.gz
