name: Release

on:
  push:
    tags:
      - '*'

jobs:

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read application version
        id: get_version
        run: echo ::set-output name=VERSION::$(cat VERSION)

      # =================================================================================================
      # Build and push docker images to GitHub Container Registry
      # =================================================================================================

      - name: Build Docker images
        run: |
          docker build -t ghcr.io/sambatv/imagecheck:${{ github.sha }} .
          docker tag ghcr.io/sambatv/imagecheck:${{ github.sha }} ghcr.io/sambatv/imagecheck:v${{ steps.get_version.outputs.VERSION }}
          docker tag ghcr.io/sambatv/imagecheck:${{ github.sha }} ghcr.io/sambatv/imagecheck:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password:
            ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push ghcr.io/sambatv/imagecheck:${{ github.sha }}
          docker push ghcr.io/sambatv/imagecheck:v${{ steps.get_version.outputs.VERSION }}
          docker push ghcr.io/sambatv/imagecheck:latest

      # =================================================================================================
      # Build and push binary and source tarballs to GitHub Releases if not already released
      # =================================================================================================

      #      - name: Ensure release does not already exist
      #        id: check_release
      #        run: |
      #          set -e
      #          curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get_version.outputs.VERSION }}
      #          if [ $? -eq 0 ]; then
      #            echo "Release v${{ steps.get_version.outputs.VERSION }} already exists"
      #            exit 1
      #          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Build binary tarball for Linux/Intel
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/linux/amd64/imagecheck .
          cp LICENSE README.md build/linux/amd64/
          tar -czf build/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_amd64.tar.gz -C build/linux/amd64 .

      - name: Build binary tarball for Linux/Arm
        run: |
          GOOS=linux GOARCH=arm64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/linux/arm64/imagecheck .
          cp LICENSE README.md build/linux/arm64/
          tar -czf build/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_arm64.tar.gz -C build/linux/arm64 .

      - name: Build binary tarball for macOS/Intel
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/darwin/amd64/imagecheck .
          cp LICENSE README.md build/darwin/amd64/
          tar -czf build/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_amd64.tar.gz -C build/darwin/amd64 .

      - name: Build binary tarball for macOS/Apple Silicon
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X github.com/imagecheck/app.Version=${{ steps.get_version.outputs.VERSION }}" -o build/darwin/arm64/imagecheck .
          cp LICENSE README.md build/darwin/arm64/
          tar -czf build/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_arm64.tar.gz -C build/darwin/arm64 .

      - name: Build checksums.txt
        run: |
          cd build
          for tarball in *.tar.gz; do
            echo $(sha256sum $tarball) >> imagecheck_${{ steps.get_version.outputs.VERSION }}_checksums.txt
          done

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_amd64.tar.gz
            build/imagecheck_${{ steps.get_version.outputs.VERSION }}_linux_arm64.tar.gz
            build/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_amd64.tar.gz
            build/imagecheck_${{ steps.get_version.outputs.VERSION }}_darwin_arm64.tar.gz
            build/imagecheck_${{ steps.get_version.outputs.VERSION }}_checksums.txt
